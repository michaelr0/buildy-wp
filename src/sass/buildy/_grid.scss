.container {
  width: 90%;
  margin-right: auto;
  margin-left: auto;
  @include media-breakpoint-up(md) {
    padding-left: 15px;
    padding-right: 15px;
  }
  @include media-breakpoint-up(xl) {
    max-width: $containerWidth;
  }
}

.container-small {
  display: flex;
  justify-content: center;
  > .container,
  > .row {
    @include media-breakpoint-up(xl) {
      max-width: 75rem;
    }
  }
}

@media (min-width: 2000px) {
  .container {
    max-width: $containerWidth;
  }
}
.container-fluid {
  width: 100%;
  padding-right: 15px;
  padding-left: 15px;
  margin-right: auto;
  margin-left: auto;
}
.row {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
}
.no-gutters {
  margin-right: 0;
  margin-left: 0;
}
.no-gutters > .col,
.no-gutters > [class*="col-"] {
  padding-right: 0;
  padding-left: 0;
}

.col {
  width: 100%;
}

@each $name, $breakpoint in $grid-breakpoints {
  // Don't generate XS, instead have no prefix eg .mb-2
  @if $name == xs {
    .col {
      flex-basis: 0;
      flex-grow: 1;
      max-width: 100%;
    }
    .col-auto {
      flex: 0 0 auto;
      width: auto;
      max-width: 100%;
    }
    @for $i from 0 through 12 {
      .col-#{$i} {
        @if $i == 12 {
          flex: 0 0 100%;
        } @else {
          flex-grow: 0;
          flex-shrink: 0;
          flex-basis: calc(((#{$i} / 12 * 100) * 1%) - var(--col-gap));
          max-width: calc(((#{$i} / 12 * 100) * 1%) - var(--col-gap));
        }
      }
    }
    @for $i from 0 through 6 {
      .grid-#{$i} {
        @include grid-cols(#{$i});
      }
    }
  } @else {
    @include media-breakpoint-up($name) {
      .col-#{$name} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }
      .col-#{$name}-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: 100%;
      }
      @for $i from 0 through 12 {
        // Breakpoint sizes
        .col-#{$name}-#{$i} {
          @if $i == 12 {
            flex: 0 0 100%;
          } @else {
            flex-grow: 0;
            flex-shrink: 0;
            flex-basis: calc(((#{$i} / 12 * 100) * 1%) - var(--col-gap));
            max-width: calc(((#{$i} / 12 * 100) * 1%) - var(--col-gap));
          }
        }
      }
      @for $i from 0 through 6 {
        .grid-#{$name}-#{$i} {
          @include grid-cols(#{$i});
        }
      }
    }
  }
}

// Different col-gap utils
@for $i from 0 through 6 {
  // Breakpoint sizes
  .col-gap-#{$i} {
    --col-gap: #{$i}rem;
  }
}

/* CSS GRID STUFF --- POSSIBLY DELETING THIS SOON */
.grid {
  display: grid;
  gap: var(--col-gap);
  // IE FIX: Remove max-widths required for flexbox on columns
  @supports (display: grid) {
    .bmcb-column,
    [class*="col-"] {
      max-width: none;
      padding: 0;
      margin: 0;
    }
  }
}
